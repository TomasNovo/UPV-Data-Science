v
v<-c(x)
v
length(v)
print(seq(2,6,2))
# 2
count<-0
#2
count<-0
seq(2,6,2)
count<-count+1
{
count
x<-seq(2,6,2)
count<-count+1
}
x
count <- count+1
count <- 0
#2
count <- 0
while(count < 4)
{
count
x<-seq(2,6,2)
x
count <- count+1
}
#2
rep(c(2,6,4),4)
#2
rep(c(6,2,4),4)
#3
s<-rep(c(9),6)
s
#3
s<-c(rep(6,9), rep(5,2), rep(4,5))
s
#3
s<-c(rep(9,6), rep(2,5), rep(5,4))
s
#3
s<-c(rep(9,6), rep(2,5), rep(5,4))
s
matrix(s,5,3,byrow=TRUE)
#4
set.seed(100)
runif(20)
#4
set.seed(100)
runif(20)
#4
set.seed(100)
runif(20)
#4
set.seed(100)
rnorm(20)
#4
set.seed(100)
rnorm(20)
#4
set.seed(100)
rnorm(20)
#4
set.seed(100)
rnorm(20)
#4
set.seed(100)
n<-rnorm(20)
n
#4
set.seed(100)
n<-rnorm(20)
n
#4
set.seed(100)
n<-rnorm(20)
mean <- mean(n)
mean
#4
set.seed(100)
n<-rnorm(20)
n
mean <- mean(n)
cat("Mean: ",mean)
median <- median(n)
cat("Median: ",median)
variance <- variance(n)
cat("Variance: ",variance)
stddeviation <- sd(n)
cat("Standard deviation: ",sd)
#4
set.seed(100)
n<-rnorm(20)
n
mean <- mean(n)
cat("Mean: ",mean)
median <- median(n)
cat("Median: ",median)
v <- variance(n)
#4
set.seed(100)
n<-rnorm(20)
n
mean <- mean(n)
cat("Mean: ",mean)
median <- median(n)
cat("Median: ",median)
variance <- var(n)
cat("Variance: ", variance)
stddeviation <- sd(n)
cat("Standard deviation: ",sd)
#4
set.seed(100)
n<-rnorm(20)
n
mean <- mean(n)
cat("Mean: ", mean)
median <- median(n)
cat("Median: ", median)
variance <- var(n)
cat("Variance: ", variance)
stddeviation <- sd(n)
cat("Standard deviation: ", stddeviation)
x<-1:12
v<-c(x)
cat("Vector: ", v)
#2
rep(c(6,2,4),4)
#2
cat("4 repetitions of 6,2,4:")
rep(c(6,2,4),4)
#3
s<-c(rep(9,6), rep(2,5), rep(5,4))
cat("Generated sequence: ", s)
cat("Generated matrix: ")
matrix(s,5,3,byrow=TRUE)
100
100
#4
set.seed(100)
n<-rnorm(20)
cat("Generated vector: ", n)
set.seed
set.seed
set.seed
#4
set.seed(100)
n<-rnorm(20)
cat("Generated vector: ")
n
mean <- mean(n)
cat("Mean: ", mean)
median <- median(n)
cat("Median: ", median)
variance <- var(n)
cat("Variance: ", variance)
stddeviation <- sd(n)
cat("Standard deviation: ", stddeviation)
#5
#5
#5
#5
#5
#5
#5
# 5 a)
data <- read.table(data1.txt)
#5
# 5 a)
data <- read.table(data1.txt)
# set Desktop as working directory
setwd("C:/Users/Utilizador/Desktop/UPV-Data-Science/Practical Work 7")
getwd()
# LOAD PACKAGES
# load caret package
if (!require("caret"))
{install.packages("caret",dependencies=TRUE);
library("caret")}
# install pbkrtest
if (!require("pbkrtest"))
{install.packages("pbkrtest",dependencies=TRUE);
library("pbkrtest")}
# LOAD DATA
ttt <- read.table("tic-tac-toe.data.txt", header = F, sep = ",")
# change column names
t<- c("TL","TM","TR","ML","MM","MR","BL","BM","BR","Class")
colnames(ttt)<-make.names(t)
summary(ttt) # no missing values
##############
# exercise 2 #
##############
set.seed(300)
sample <- sample.int(n = nrow(ttt), size = floor(0.70*nrow(ttt)), replace = F)
train <- ttt[sample,]
test <- ttt[-sample,]
cat("Train dataset:")
train
cat("Test dataset:")
test
train_control <- trainControl(method = "cv", number = 10)
# Naive Bayes
if (!require("klaR"))
{install.packages("klaR",dependencies=TRUE);
library("klaR")}
set.seed(3333)
model <- train(Class~., data = train,method = "nb",trControl = train_control)
model
# Decision Tree
if (!require("rpart"))
{install.packages("rpart",dependencies=TRUE);
library("rpart")}
set.seed(3333)
model2 <- train(Class ~., data = train, method = "rpart", trControl=train_control)
model2
# Neural Network
if (!require("nnet"))
{install.packages("nnet",dependencies=TRUE);
library("nnet")}
if (!require("randomForest"))
{install.packages("randomForest",dependencies=TRUE);
library("randomForest")}
set.seed(3333)
model3 <- train(Class~., data = train, method = "nnet", trControl = train_control)
model3
# Nearest Neighbor
set.seed(3333)
model4 <- train(Class~., data = train, method = "knn", trControl = train_control)
model4
# SVM
if (!require("kernlab"))
{install.packages("kernlab",dependencies=TRUE);
library("kernlab")}
train_control5 <- trainControl(method = "repeatedcv", savePred=T, classProb=T)
set.seed(3333)
model5 <- train(Class~., data=train, method = "svmLinear", trControl = train_control)
model5
if (!require("AUC"))
{install.packages("AUC",dependencies=TRUE);
library("AUC")}
# Naive Bayes
pred <- predict(model, test)
confusionMatrix(table(pred, test$Class))
auc(roc(pred,test$Class))
# Naive Bayes
pred <- predict(model, test)
confusionMatrix(table(pred, test$Class))
auc(roc(pred,test$Class))
# 4A
# Naive Bayes
pred <- predict(model, test, type = "prob")
prediction(pred$positive, test$Class)
##############
# exercise 5 #
##############
if (!require("ROCR"))
{install.packages("ROCR",dependencies=TRUE);
library("ROCR")}
# 4A
# Naive Bayes
pred <- predict(model, test, type = "prob")
prediction(pred$positive, test$Class)
# Decision Tree
pred2 <- predict(model, test, type = "prob")
prediction(pred2$positive, test$Class)
# 4B
prediction(pred$positive, test$Class)
prediction(pred2$positive, test$Class)
prediction(pred3$positive, test$Class)
prediction(pred4$positive, test$Class)
# 4A
# Naive Bayes
pred <- predict(model, test, type = "prob")
# Decision Tree
pred2 <- predict(model, test, type = "prob")
# Neural Network
pred3 <- predict(model, test, type = "prob")
# Nearest Neighbor
pred4 <- predict(model, test, type = "prob")
# SVM
pred5 <- predict(model, test, type = "prob")
# 4B
prediction(pred$positive, test$Class)
prediction(pred2$positive, test$Class)
prediction(pred3$positive, test$Class)
prediction(pred4$positive, test$Class)
prediction(pred5$positive, test$Class)
# 4B
rocr_pred <- prediction(pred$positive, test$Class)
rocr_pred2 <- prediction(pred2$positive, test$Class)
rocr_pred3 <- prediction(pred3$positive, test$Class)
rocr_pred4 <- prediction(pred4$positive, test$Class)
rocr_pred5 <- prediction(pred5$positive, test$Class)
# 4C
perf <- performance(rocr_pred,'tpr','fpr')
# 4C
perf <- performance(rocr_pred,'tpr','fpr')
perf2 <- performance(rocr_pred2,'tpr','fpr')
perf3 <- performance(rocr_pred3,'tpr','fpr')
perf4 <- performance(rocr_pred4,'tpr','fpr')
perf5 <- performance(rocr_pred5,'tpr','fpr')
# Naive Bayes
pred <- predict(model, test)
confusionMatrix(table(pred, test$Class))
pred
test$Class
auc(roc(pred,as.factor(test$Class)))
auc(roc(pred,as.factor(test$Class)))
# Decision Tree
pred2 <- predict(model2, test)
confusionMatrix(table(pred2, test$Class))
auc(roc(pred2,as.factor(test$Class)))
# Neural Network
pred3 <- predict(model3, test)
confusionMatrix(table(pred3, test$Class))
auc(roc(pred3,as.factor(test$Class)))
# Nearest Neighbor
pred4 <- predict(model4, test)
confusionMatrix(table(pred4, test$Class))
auc(roc(pred4,as.factor(test$Class)))
# SVM
pred5 <- predict(model5, test)
confusionMatrix(table(pred5, test$Class))
auc(roc(pred5,as.factor(test$Class)))
plot(perf, colorize = TRUE)
plot(perf2, add = TRUE, colorize = TRUE)
plot(perf3, add = TRUE, colorize = TRUE)
plot(perf4, add = TRUE, colorize = TRUE)
plot(perf5, add = TRUE, colorize = TRUE)
perf
plot(perf, colorize = TRUE)
plot(perf, colorize = TRUE)
plot(perf2, add = TRUE, col = "red")
plot(perf3, add = TRUE, col = "blue")
plot(perf4, add = TRUE, col = "green")
plot(perf5, add = TRUE, colorize = "yellow")
plot(perf5, add = TRUE, col = "yellow")
plot(perf, col = "pink")
plot(perf2, add = TRUE, col = "red")
plot(perf3, add = TRUE, col = "blue")
plot(perf4, add = TRUE, col = "green")
plot(perf5, add = TRUE, col = "yellow")
# 4A
# Naive Bayes
pred <- predict(model, test, type = "prob")
# Decision Tree
pred2 <- predict(model2, test, type = "prob")
# Neural Network
pred3 <- predict(model3, test, type = "prob")
# Nearest Neighbor
pred4 <- predict(model4, test, type = "prob")
# SVM
pred5 <- predict(model5, test, type = "prob")
# 4B
rocr_pred <- prediction(pred$positive, test$Class)
rocr_pred2 <- prediction(pred2$positive, test$Class)
rocr_pred3 <- prediction(pred3$positive, test$Class)
rocr_pred4 <- prediction(pred4$positive, test$Class)
rocr_pred5 <- prediction(pred5$positive, test$Class)
# 4C
perf <- performance(rocr_pred,'tpr','fpr')
perf2 <- performance(rocr_pred2,'tpr','fpr')
perf3 <- performance(rocr_pred3,'tpr','fpr')
perf4 <- performance(rocr_pred4,'tpr','fpr')
perf5 <- performance(rocr_pred5,'tpr','fpr')
plot(perf, col = "pink")
plot(perf2, add = TRUE, col = "red")
plot(perf3, add = TRUE, col = "blue")
plot(perf4, add = TRUE, col = "green")
plot(perf5, add = TRUE, col = "yellow")
# SVM
pred5 <- predict(model5, test)
confusionMatrix(table(pred5, test$Class))
auc(roc(pred5,as.factor(test$Class)))
# SVM
pred5 <- predict(model5, test, type = "prob")
rocr_pred5 <- prediction(pred5$positive, test$Class)
plot(perf5, add = TRUE, col = "yellow")
train_control <- trainControl(method = "cv", number = 10)
# Naive Bayes
if (!require("klaR"))
{install.packages("klaR",dependencies=TRUE);
library("klaR")}
set.seed(3333)
model <- train(Class~., data = train,method = "nb",trControl = train_control)
model
# Decision Tree
if (!require("rpart"))
{install.packages("rpart",dependencies=TRUE);
library("rpart")}
set.seed(3333)
model2 <- train(Class ~., data = train, method = "rpart", trControl=train_control)
model2
# Neural Network
if (!require("nnet"))
{install.packages("nnet",dependencies=TRUE);
library("nnet")}
if (!require("randomForest"))
{install.packages("randomForest",dependencies=TRUE);
library("randomForest")}
set.seed(3333)
model3 <- train(Class~., data = train, method = "nnet", trControl = train_control)
model3
# Nearest Neighbor
set.seed(3333)
model4 <- train(Class~., data = train, method = "knn", trControl = train_control)
model4
set.seed(3333)
model5 <- train(Class~., data=train, method = "svmLinear", trControl = train_control)
model5
# Naive Bayes
pred <- predict(model, test)
confusionMatrix(table(pred, test$Class))
auc(roc(pred,as.factor(test$Class)))
# Decision Tree
pred2 <- predict(model2, test)
confusionMatrix(table(pred2, test$Class))
auc(roc(pred2,as.factor(test$Class)))
# Neural Network
pred3 <- predict(model3, test)
confusionMatrix(table(pred3, test$Class))
auc(roc(pred3,as.factor(test$Class)))
# Nearest Neighbor
pred4 <- predict(model4, test)
confusionMatrix(table(pred4, test$Class))
auc(roc(pred4,as.factor(test$Class)))
# SVM
pred5 <- predict(model5, test)
confusionMatrix(table(pred5, test$Class))
auc(roc(pred5,as.factor(test$Class)))
perf5 <- performance(rocr_pred5,'tpr','fpr')
rocr_pred5 <- prediction(pred5$positive, test$Class)
# SVM
pred5 <- predict(model5, test, type = "prob")
rocr_pred5 <- prediction(pred5$positive, as.factor(test$Class))
# SVM
pred5 <- predict(model5, test, type = "prob")
# SVM
pred5 <- predict(model5, test, type = "prob")
train_control <- trainControl(method = "cv", number = 10, classProbs =  TRUE)
set.seed(3333)
model <- train(Class~., data = train,method = "nb",trControl = train_control)
model
set.seed(3333)
model2 <- train(Class ~., data = train, method = "rpart", trControl=train_control)
model2
set.seed(3333)
model5 <- train(Class~., data=train, method = "svmLinear", trControl = train_control)
model5
# SVM
pred5 <- predict(model5, test)
confusionMatrix(table(pred5, test$Class))
auc(roc(pred5,as.factor(test$Class)))
# SVM
pred5 <- predict(model5, test, type = "prob")
# 5A
# Naive Bayes
pred <- predict(model, test, type = "prob")
# Decision Tree
pred2 <- predict(model2, test, type = "prob")
# Neural Network
pred3 <- predict(model3, test, type = "prob")
# Nearest Neighbor
pred4 <- predict(model4, test, type = "prob")
# SVM
pred5 <- predict(model5, test, type = "prob")
# 5B
rocr_pred <- prediction(pred$positive, test$Class)
rocr_pred2 <- prediction(pred2$positive, test$Class)
rocr_pred3 <- prediction(pred3$positive, test$Class)
rocr_pred4 <- prediction(pred4$positive, test$Class)
rocr_pred5 <- prediction(pred5$positive, test$Class)
# 5C
perf <- performance(rocr_pred,'tpr','fpr')
perf2 <- performance(rocr_pred2,'tpr','fpr')
perf3 <- performance(rocr_pred3,'tpr','fpr')
perf4 <- performance(rocr_pred4,'tpr','fpr')
perf5 <- performance(rocr_pred5,'tpr','fpr')
# 5D
plot(perf, col = "pink")
plot(perf2, add = TRUE, col = "red")
plot(perf3, add = TRUE, col = "blue")
plot(perf4, add = TRUE, col = "green")
plot(perf5, add = TRUE, col = "yellow")
# set Desktop as working directory
setwd("C:/Users/Utilizador/Desktop/UPV-Data-Science/Practical Work 7")
getwd()
# LOAD PACKAGES
# load caret package
if (!require("caret"))
{install.packages("caret",dependencies=TRUE);
library("caret")}
# install pbkrtest
if (!require("pbkrtest"))
{install.packages("pbkrtest",dependencies=TRUE);
library("pbkrtest")}
# LOAD DATA
ttt <- read.table("tic-tac-toe.data.txt", header = F, sep = ",")
# change column names
t<- c("TL","TM","TR","ML","MM","MR","BL","BM","BR","Class")
colnames(ttt)<-make.names(t)
summary(ttt) # no missing values
##############
# exercise 2 #
##############
set.seed(300)
sample <- sample.int(n = nrow(ttt), size = floor(0.70*nrow(ttt)), replace = F)
train <- ttt[sample,]
test <- ttt[-sample,]
cat("Train dataset:")
train
cat("Test dataset:")
