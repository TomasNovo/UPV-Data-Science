x<-5
x
y<-3*3
y
u->5
0.5->z
z
z=1
z
z=20
z
assign("z", 20)
z
A<-"Tomas Novo"
A
A<-"DATA SCIENCE"; h=17; 1<-TRUE
B<-"DATA SCIENCE"; h=17; 1<-TRUE
mode(A)
x<-1:12
x
v<-x
v
length(v)
v<-c(x)
v
v<-c(x)
v
length(v)
print(seq(2,6,2))
# 2
count<-0
#2
count<-0
seq(2,6,2)
count<-count+1
{
count
x<-seq(2,6,2)
count<-count+1
}
x
count <- count+1
count <- 0
#2
count <- 0
while(count < 4)
{
count
x<-seq(2,6,2)
x
count <- count+1
}
#2
rep(c(2,6,4),4)
#2
rep(c(6,2,4),4)
#3
s<-rep(c(9),6)
s
#3
s<-c(rep(6,9), rep(5,2), rep(4,5))
s
#3
s<-c(rep(9,6), rep(2,5), rep(5,4))
s
#3
s<-c(rep(9,6), rep(2,5), rep(5,4))
s
matrix(s,5,3,byrow=TRUE)
#4
set.seed(100)
runif(20)
#4
set.seed(100)
runif(20)
#4
set.seed(100)
runif(20)
#4
set.seed(100)
rnorm(20)
#4
set.seed(100)
rnorm(20)
#4
set.seed(100)
rnorm(20)
#4
set.seed(100)
rnorm(20)
#4
set.seed(100)
n<-rnorm(20)
n
#4
set.seed(100)
n<-rnorm(20)
n
#4
set.seed(100)
n<-rnorm(20)
mean <- mean(n)
mean
#4
set.seed(100)
n<-rnorm(20)
n
mean <- mean(n)
cat("Mean: ",mean)
median <- median(n)
cat("Median: ",median)
variance <- variance(n)
cat("Variance: ",variance)
stddeviation <- sd(n)
cat("Standard deviation: ",sd)
#4
set.seed(100)
n<-rnorm(20)
n
mean <- mean(n)
cat("Mean: ",mean)
median <- median(n)
cat("Median: ",median)
v <- variance(n)
#4
set.seed(100)
n<-rnorm(20)
n
mean <- mean(n)
cat("Mean: ",mean)
median <- median(n)
cat("Median: ",median)
variance <- var(n)
cat("Variance: ", variance)
stddeviation <- sd(n)
cat("Standard deviation: ",sd)
#4
set.seed(100)
n<-rnorm(20)
n
mean <- mean(n)
cat("Mean: ", mean)
median <- median(n)
cat("Median: ", median)
variance <- var(n)
cat("Variance: ", variance)
stddeviation <- sd(n)
cat("Standard deviation: ", stddeviation)
x<-1:12
v<-c(x)
cat("Vector: ", v)
#2
rep(c(6,2,4),4)
#2
cat("4 repetitions of 6,2,4:")
rep(c(6,2,4),4)
#3
s<-c(rep(9,6), rep(2,5), rep(5,4))
cat("Generated sequence: ", s)
cat("Generated matrix: ")
matrix(s,5,3,byrow=TRUE)
100
100
#4
set.seed(100)
n<-rnorm(20)
cat("Generated vector: ", n)
set.seed
set.seed
set.seed
#4
set.seed(100)
n<-rnorm(20)
cat("Generated vector: ")
n
mean <- mean(n)
cat("Mean: ", mean)
median <- median(n)
cat("Median: ", median)
variance <- var(n)
cat("Variance: ", variance)
stddeviation <- sd(n)
cat("Standard deviation: ", stddeviation)
#5
#5
#5
#5
#5
#5
#5
# 5 a)
data <- read.table(data1.txt)
#5
# 5 a)
data <- read.table(data1.txt)
# set Desktop as working directory
setwd("C:/Users/Utilizador/Desktop/UPV-Data-Science/Practical Work 6")
getwd()
# LOAD PACKAGES
# load lattice package
if (!require("lattice"))
{install.packages("lattice",dependencies=TRUE); library("lattice")}
# load rpart package
if (!require("rpart"))
{install.packages("rpart",dependencies=TRUE);
library("rpart")}
# load nnet package
if (!require("nnet"))
{install.packages("nnet",dependencies=TRUE);
library("nnet")}
# load Metrics package
if (!require("Metrics"))
{install.packages("Metrics",dependencies=TRUE);
library("Metrics")}
# LOAD DATA
house_prices <- read.csv("HousePricesData-Address-City-Features_fromZillow.csv", header=TRUE, sep=';')
cat("House prices info:")
house_prices
# anonymise data by removing street column
house_prices <- subset(house_prices, select = -street)
cat("House prices info:")
house_prices
# data explore
str(house_prices)
summary(house_prices)
##############
# exercise 2 #
##############
attach(house_prices)
forplot<-make.groups(bath=data.frame(value=bath,zipcode,city,state,price),year=data.frame(value=year,zipcode,city,state,price),bed=data.frame(value=bed,zipcode,city,state,price),rooms=data.frame(value=rooms,zipcode,city,state,price),SqFt=data.frame(value=SqFt,zipcode,city,state,price))
detach(house_prices)
xyplot(price~value|which, data=forplot,scales=list(relation="free"))
##############
# exercise 3 #
##############
set.seed(100)
sample <- sample.int(n = nrow(house_prices), size = floor(0.75*nrow(house_prices)), replace = F)
train <- house_prices[sample,]
test <- house_prices[-sample,]
cat("Train dataset:")
train
cat("Test dataset:")
test
# linear model
linear_model <- lm(zipcode~., data = train)
linear_model
# regression tree CART
cart_tree <- rpart(zipcode~., data=train, method = "anova")
cart_tree
# neural network
neural_network <- nnet(zipcode~., data = train, size = 12, skip = TRUE, linout = TRUE)
neural_network
# linear model
summary(linear_model)
# regression tree CART
summary(cart_tree)
plot(cart_tree, main="Regression tree (CART)")
text(cart_tree, use.n=TRUE, all=TRUE, cex=.8)
# neural network
summary(neural_network)
##############
# exercise 6 #
##############
printcp(cart_tree)
plotcp(cart_tree)
# select the cp value with lowest cross validation error (xerror)
pruned_tree <- prune(cart_tree, cp = 0.01)
pruned_tree
plot(pruned_tree, main="Pruned Regression tree (CART)")
text(pruned_tree, use.n=TRUE, all=TRUE, cex=.8)
##############
# exercise 7 #
##############
rmse(house_prices, train)
mae(house_prices, train)
##############
# exercise 7 #
##############
predictions <- predic(cart_tree, test)
##############
# exercise 7 #
##############
predictions <- predict(cart_tree, test)
##############
# exercise 7 #
##############
predictions <- predict(pruned_tree, test)
# regression tree CART
cart_tree <- rpart(zipcode~., data=train, method = "anova")
cart_tree
# regression tree CART
summary(cart_tree)
plot(cart_tree, main="Regression tree (CART)")
text(cart_tree, use.n=TRUE, all=TRUE, cex=.8)
##############
# exercise 7 #
##############
predictions <- predict(cart_tree, test)
##############
# exercise 7 #
##############
predictions <- predict(cart_tree, test$zipcode)
rmse(test$zipcode, train)
rmse(test$zipcode, cart_tree)
rmse(test, cart_tree)
##############
# exercise 7 #
##############
predictions <- predict(cart_tree, test)
nrow(cart_tree)
nrow(test)
##############
# exercise 7 #
##############
predictions <- predict(train, test)
# regression tree CART
summary(cart_tree)
plot(cart_tree, main="Regression tree (CART)")
text(cart_tree, use.n=TRUE, all=TRUE, cex=.8)
##############
# exercise 7 #
##############
predictions <- predict(linear_model, test)
